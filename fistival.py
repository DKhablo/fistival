import json
from typing import List, Dict

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
def load_data() -> Dict:
    try:
        with open("festival_data.json", "r", encoding="utf-8") as file:
            return json.load(file)
    except FileNotFoundError:
        return {"participants": [], "performances": [], "scores": []}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def save_data(data: Dict) -> None:
    with open("festival_data.json", "w", encoding="utf-8") as file:
        json.dump(data, file, ensure_ascii=False, indent=4)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
def add_participant(data: Dict) -> None:
    name = input("–í–≤–µ–¥–∏—Ç–µ –§–ò–û —É—á–∞—Å—Ç–Ω–∏–∫–∞: ")
    group = input("–í–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É (–∫—É—Ä—Å/—Ñ–∞–∫—É–ª—å—Ç–µ—Ç): ")
    data["participants"].append({"name": name, "group": group})
    save_data(data)
    print(f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ {name} –¥–æ–±–∞–≤–ª–µ–Ω!")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è
def add_performance(data: Dict) -> None:
    if not data["participants"]:
        print("‚ùå –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤! –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö.")
        return
    print("\n–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:")
    for i, participant in enumerate(data["participants"], 1):
        print(f"{i}. {participant['name']} ({participant['group']})")

    try:
        participant_id = int(input("\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞: ")) - 1
        if participant_id < 0 or participant_id >= len(data["participants"]):
            raise ValueError
    except ValueError:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞!")
        return

    title = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è: ")
    data["performances"].append({
        "participant_id": participant_id,
        "title": title
    })
    save_data(data)
    print("‚úÖ –í—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
def add_score(data: Dict) -> None:
    if not data["performances"]:
        print("‚ùå –ù–µ—Ç –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π!")
        return

    print("\n–°–ø–∏—Å–æ–∫ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π:")
    for i, perf in enumerate(data["performances"], 1):
        participant = data["participants"][perf["participant_id"]]
        print(f"{i}. {perf['title']} ({participant['name']})")

    try:
        perf_id = int(input("\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è: ")) - 1
        if perf_id < 0 or perf_id >= len(data["performances"]):
            raise ValueError
    except ValueError:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è!")
        return

    try:
        score = float(input("–í–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫—É (1-10): "))
        if score < 1 or score > 10:
            raise ValueError
    except ValueError:
        print("‚ùå –û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10!")
        return

    data["scores"].append({
        "performance_id": perf_id,
        "score": score
    })
    save_data(data)
    print("‚úÖ –û—Ü–µ–Ω–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

# –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
def show_results(data: Dict) -> None:
    if not data["scores"]:
        print("‚ùå –ù–µ—Ç –æ—Ü–µ–Ω–æ–∫!")
        return

    # –°—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è
    scores_sum = {}
    scores_count = {}

    for score in data["scores"]:
        perf_id = score["performance_id"]
        if perf_id not in scores_sum:
            scores_sum[perf_id] = 0
            scores_count[perf_id] = 0
        scores_sum[perf_id] += score["score"]
        scores_count[perf_id] += 1

    avg_scores = []
    for perf_id in scores_sum:
        avg = scores_sum[perf_id] / scores_count[perf_id]
        perf = data["performances"][perf_id]
        participant = data["participants"][perf["participant_id"]]
        avg_scores.append({
            "name": participant["name"],
            "title": perf["title"],
            "avg_score": avg
        })

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –æ—Ü–µ–Ω–∫–∏
    avg_scores.sort(key=lambda x: x["avg_score"], reverse=True)

    print("\nüèÜ –¢–æ–ø-3 –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è:")
    for i, entry in enumerate(avg_scores[:3], 1):
        print(f"{i}. {entry['title']} ({entry['name']}) ‚Äî {entry['avg_score']:.2f} –±–∞–ª–ª–æ–≤")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main():
    data = load_data()

    while True:
        print("\nüé≠ –§–µ—Å—Ç–∏–≤–∞–ª—å —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–∞–º–æ–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        print("1. –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞")
        print("2. –î–æ–±–∞–≤–∏—Ç—å –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ")
        print("3. –î–æ–±–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É")
        print("4. –ü–æ–∫–∞–∑–∞—Ç—å –∏—Ç–æ–≥–∏")
        print("5. –í—ã—Ö–æ–¥")

        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")

        if choice == "1":
            add_participant(data)
        elif choice == "2":
            add_performance(data)
        elif choice == "3":
            add_score(data)
        elif choice == "4":
            show_results(data)
        elif choice == "5":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")

if __name__ == "__main__":
    main()